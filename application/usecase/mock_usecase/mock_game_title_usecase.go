// Code generated by MockGen. DO NOT EDIT.
// Source: game_title_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	dbmodel "github.com/taniwhy/mochi-match-rest/domain/models/dbmodel"
	reflect "reflect"
)

// MockGameTitleUseCase is a mock of GameTitleUseCase interface
type MockGameTitleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGameTitleUseCaseMockRecorder
}

// MockGameTitleUseCaseMockRecorder is the mock recorder for MockGameTitleUseCase
type MockGameTitleUseCaseMockRecorder struct {
	mock *MockGameTitleUseCase
}

// NewMockGameTitleUseCase creates a new mock instance
func NewMockGameTitleUseCase(ctrl *gomock.Controller) *MockGameTitleUseCase {
	mock := &MockGameTitleUseCase{ctrl: ctrl}
	mock.recorder = &MockGameTitleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameTitleUseCase) EXPECT() *MockGameTitleUseCaseMockRecorder {
	return m.recorder
}

// FindAllGameTitle mocks base method
func (m *MockGameTitleUseCase) FindAllGameTitle() ([]*dbmodel.GameTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGameTitle")
	ret0, _ := ret[0].([]*dbmodel.GameTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGameTitle indicates an expected call of FindAllGameTitle
func (mr *MockGameTitleUseCaseMockRecorder) FindAllGameTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGameTitle", reflect.TypeOf((*MockGameTitleUseCase)(nil).FindAllGameTitle))
}

// InsertGameTitle mocks base method
func (m *MockGameTitleUseCase) InsertGameTitle(gameTitle *dbmodel.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGameTitle indicates an expected call of InsertGameTitle
func (mr *MockGameTitleUseCaseMockRecorder) InsertGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGameTitle", reflect.TypeOf((*MockGameTitleUseCase)(nil).InsertGameTitle), gameTitle)
}

// UpdateGameTitle mocks base method
func (m *MockGameTitleUseCase) UpdateGameTitle(gameTitle *dbmodel.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameTitle indicates an expected call of UpdateGameTitle
func (mr *MockGameTitleUseCaseMockRecorder) UpdateGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameTitle", reflect.TypeOf((*MockGameTitleUseCase)(nil).UpdateGameTitle), gameTitle)
}

// DeleteGameTitle mocks base method
func (m *MockGameTitleUseCase) DeleteGameTitle(gameTitle *dbmodel.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGameTitle indicates an expected call of DeleteGameTitle
func (mr *MockGameTitleUseCaseMockRecorder) DeleteGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameTitle", reflect.TypeOf((*MockGameTitleUseCase)(nil).DeleteGameTitle), gameTitle)
}
