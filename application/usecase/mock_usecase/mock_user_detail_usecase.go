// Code generated by MockGen. DO NOT EDIT.
// Source: user_detail_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	dbmodel "github.com/taniwhy/mochi-match-rest/domain/models/dbmodel"
	reflect "reflect"
)

// MockUserDetailUseCase is a mock of UserDetailUseCase interface
type MockUserDetailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailUseCaseMockRecorder
}

// MockUserDetailUseCaseMockRecorder is the mock recorder for MockUserDetailUseCase
type MockUserDetailUseCaseMockRecorder struct {
	mock *MockUserDetailUseCase
}

// NewMockUserDetailUseCase creates a new mock instance
func NewMockUserDetailUseCase(ctrl *gomock.Controller) *MockUserDetailUseCase {
	mock := &MockUserDetailUseCase{ctrl: ctrl}
	mock.recorder = &MockUserDetailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDetailUseCase) EXPECT() *MockUserDetailUseCaseMockRecorder {
	return m.recorder
}

// FindUserDetailByID mocks base method
func (m *MockUserDetailUseCase) FindUserDetailByID(id string) (*dbmodel.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailByID", id)
	ret0, _ := ret[0].(*dbmodel.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailByID indicates an expected call of FindUserDetailByID
func (mr *MockUserDetailUseCaseMockRecorder) FindUserDetailByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailByID", reflect.TypeOf((*MockUserDetailUseCase)(nil).FindUserDetailByID), id)
}

// CreateUserDetail mocks base method
func (m *MockUserDetailUseCase) CreateUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserDetail indicates an expected call of CreateUserDetail
func (mr *MockUserDetailUseCaseMockRecorder) CreateUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDetail", reflect.TypeOf((*MockUserDetailUseCase)(nil).CreateUserDetail), userDetail)
}

// UpdateUserDetail mocks base method
func (m *MockUserDetailUseCase) UpdateUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetail indicates an expected call of UpdateUserDetail
func (mr *MockUserDetailUseCaseMockRecorder) UpdateUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetail", reflect.TypeOf((*MockUserDetailUseCase)(nil).UpdateUserDetail), userDetail)
}

// DeleteUserDetail mocks base method
func (m *MockUserDetailUseCase) DeleteUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserDetail indicates an expected call of DeleteUserDetail
func (mr *MockUserDetailUseCaseMockRecorder) DeleteUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDetail", reflect.TypeOf((*MockUserDetailUseCase)(nil).DeleteUserDetail), userDetail)
}
