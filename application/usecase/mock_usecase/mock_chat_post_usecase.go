// Code generated by MockGen. DO NOT EDIT.
// Source: chat_post_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	dbmodel "github.com/taniwhy/mochi-match-rest/domain/models/dbmodel"
	reflect "reflect"
)

// MockChatPostUseCase is a mock of ChatPostUseCase interface
type MockChatPostUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChatPostUseCaseMockRecorder
}

// MockChatPostUseCaseMockRecorder is the mock recorder for MockChatPostUseCase
type MockChatPostUseCaseMockRecorder struct {
	mock *MockChatPostUseCase
}

// NewMockChatPostUseCase creates a new mock instance
func NewMockChatPostUseCase(ctrl *gomock.Controller) *MockChatPostUseCase {
	mock := &MockChatPostUseCase{ctrl: ctrl}
	mock.recorder = &MockChatPostUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatPostUseCase) EXPECT() *MockChatPostUseCaseMockRecorder {
	return m.recorder
}

// FindAllChatPost mocks base method
func (m *MockChatPostUseCase) FindAllChatPost() ([]*dbmodel.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllChatPost")
	ret0, _ := ret[0].([]*dbmodel.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllChatPost indicates an expected call of FindAllChatPost
func (mr *MockChatPostUseCaseMockRecorder) FindAllChatPost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllChatPost", reflect.TypeOf((*MockChatPostUseCase)(nil).FindAllChatPost))
}

// FindChatPostByRoomID mocks base method
func (m *MockChatPostUseCase) FindChatPostByRoomID(id string) ([]*dbmodel.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatPostByRoomID", id)
	ret0, _ := ret[0].([]*dbmodel.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatPostByRoomID indicates an expected call of FindChatPostByRoomID
func (mr *MockChatPostUseCaseMockRecorder) FindChatPostByRoomID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatPostByRoomID", reflect.TypeOf((*MockChatPostUseCase)(nil).FindChatPostByRoomID), id)
}

// FindChatPostByRoomIDAndLimit mocks base method
func (m *MockChatPostUseCase) FindChatPostByRoomIDAndLimit(id, limit string) ([]*dbmodel.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatPostByRoomIDAndLimit", id, limit)
	ret0, _ := ret[0].([]*dbmodel.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatPostByRoomIDAndLimit indicates an expected call of FindChatPostByRoomIDAndLimit
func (mr *MockChatPostUseCaseMockRecorder) FindChatPostByRoomIDAndLimit(id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatPostByRoomIDAndLimit", reflect.TypeOf((*MockChatPostUseCase)(nil).FindChatPostByRoomIDAndLimit), id, limit)
}

// FindChatPostByRoomIDAndOffset mocks base method
func (m *MockChatPostUseCase) FindChatPostByRoomIDAndOffset(id, offset string) ([]*dbmodel.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatPostByRoomIDAndOffset", id, offset)
	ret0, _ := ret[0].([]*dbmodel.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatPostByRoomIDAndOffset indicates an expected call of FindChatPostByRoomIDAndOffset
func (mr *MockChatPostUseCaseMockRecorder) FindChatPostByRoomIDAndOffset(id, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatPostByRoomIDAndOffset", reflect.TypeOf((*MockChatPostUseCase)(nil).FindChatPostByRoomIDAndOffset), id, offset)
}

// FindChatPostByRoomIDAndLimitAndOffset mocks base method
func (m *MockChatPostUseCase) FindChatPostByRoomIDAndLimitAndOffset(id, offset, limit string) ([]*dbmodel.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatPostByRoomIDAndLimitAndOffset", id, offset, limit)
	ret0, _ := ret[0].([]*dbmodel.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatPostByRoomIDAndLimitAndOffset indicates an expected call of FindChatPostByRoomIDAndLimitAndOffset
func (mr *MockChatPostUseCaseMockRecorder) FindChatPostByRoomIDAndLimitAndOffset(id, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatPostByRoomIDAndLimitAndOffset", reflect.TypeOf((*MockChatPostUseCase)(nil).FindChatPostByRoomIDAndLimitAndOffset), id, offset, limit)
}

// InsertChatPost mocks base method
func (m *MockChatPostUseCase) InsertChatPost(room *dbmodel.ChatPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChatPost", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertChatPost indicates an expected call of InsertChatPost
func (mr *MockChatPostUseCaseMockRecorder) InsertChatPost(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChatPost", reflect.TypeOf((*MockChatPostUseCase)(nil).InsertChatPost), room)
}

// DeleteChatPost mocks base method
func (m *MockChatPostUseCase) DeleteChatPost(room *dbmodel.ChatPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatPost", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatPost indicates an expected call of DeleteChatPost
func (mr *MockChatPostUseCaseMockRecorder) DeleteChatPost(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatPost", reflect.TypeOf((*MockChatPostUseCase)(nil).DeleteChatPost), room)
}
