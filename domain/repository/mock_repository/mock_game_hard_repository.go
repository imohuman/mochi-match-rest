// Code generated by MockGen. DO NOT EDIT.
// Source: game_hard_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockIGameHardRepository is a mock of IGameHardRepository interface
type MockIGameHardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGameHardRepositoryMockRecorder
}

// MockIGameHardRepositoryMockRecorder is the mock recorder for MockIGameHardRepository
type MockIGameHardRepositoryMockRecorder struct {
	mock *MockIGameHardRepository
}

// NewMockIGameHardRepository creates a new mock instance
func NewMockIGameHardRepository(ctrl *gomock.Controller) *MockIGameHardRepository {
	mock := &MockIGameHardRepository{ctrl: ctrl}
	mock.recorder = &MockIGameHardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGameHardRepository) EXPECT() *MockIGameHardRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockIGameHardRepository) FindAll() ([]*models.GameHard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*models.GameHard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockIGameHardRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIGameHardRepository)(nil).FindAll))
}

// Insert mocks base method
func (m *MockIGameHardRepository) Insert(arg0 *models.GameHard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIGameHardRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIGameHardRepository)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockIGameHardRepository) Update(arg0 *models.GameHard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIGameHardRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIGameHardRepository)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockIGameHardRepository) Delete(arg0 *models.GameHard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIGameHardRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIGameHardRepository)(nil).Delete), arg0)
}
