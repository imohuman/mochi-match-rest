// Code generated by MockGen. DO NOT EDIT.
// Source: game_title_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockGameTitleRepository is a mock of GameTitleRepository interface
type MockGameTitleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameTitleRepositoryMockRecorder
}

// MockGameTitleRepositoryMockRecorder is the mock recorder for MockGameTitleRepository
type MockGameTitleRepositoryMockRecorder struct {
	mock *MockGameTitleRepository
}

// NewMockGameTitleRepository creates a new mock instance
func NewMockGameTitleRepository(ctrl *gomock.Controller) *MockGameTitleRepository {
	mock := &MockGameTitleRepository{ctrl: ctrl}
	mock.recorder = &MockGameTitleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameTitleRepository) EXPECT() *MockGameTitleRepositoryMockRecorder {
	return m.recorder
}

// FindAllGameTitle mocks base method
func (m *MockGameTitleRepository) FindAllGameTitle() ([]*models.GameTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGameTitle")
	ret0, _ := ret[0].([]*models.GameTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGameTitle indicates an expected call of FindAllGameTitle
func (mr *MockGameTitleRepositoryMockRecorder) FindAllGameTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGameTitle", reflect.TypeOf((*MockGameTitleRepository)(nil).FindAllGameTitle))
}

// InsertGameTitle mocks base method
func (m *MockGameTitleRepository) InsertGameTitle(gameTitle *models.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGameTitle indicates an expected call of InsertGameTitle
func (mr *MockGameTitleRepositoryMockRecorder) InsertGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGameTitle", reflect.TypeOf((*MockGameTitleRepository)(nil).InsertGameTitle), gameTitle)
}

// UpdateGameTitle mocks base method
func (m *MockGameTitleRepository) UpdateGameTitle(gameTitle *models.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameTitle indicates an expected call of UpdateGameTitle
func (mr *MockGameTitleRepositoryMockRecorder) UpdateGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameTitle", reflect.TypeOf((*MockGameTitleRepository)(nil).UpdateGameTitle), gameTitle)
}

// DeleteGameTitle mocks base method
func (m *MockGameTitleRepository) DeleteGameTitle(gameTitle *models.GameTitle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGameTitle", gameTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGameTitle indicates an expected call of DeleteGameTitle
func (mr *MockGameTitleRepositoryMockRecorder) DeleteGameTitle(gameTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGameTitle", reflect.TypeOf((*MockGameTitleRepository)(nil).DeleteGameTitle), gameTitle)
}
