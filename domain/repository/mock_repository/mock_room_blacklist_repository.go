// Code generated by MockGen. DO NOT EDIT.
// Source: room_blacklist_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockRoomBlacklistRepository is a mock of RoomBlacklistRepository interface
type MockRoomBlacklistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomBlacklistRepositoryMockRecorder
}

// MockRoomBlacklistRepositoryMockRecorder is the mock recorder for MockRoomBlacklistRepository
type MockRoomBlacklistRepositoryMockRecorder struct {
	mock *MockRoomBlacklistRepository
}

// NewMockRoomBlacklistRepository creates a new mock instance
func NewMockRoomBlacklistRepository(ctrl *gomock.Controller) *MockRoomBlacklistRepository {
	mock := &MockRoomBlacklistRepository{ctrl: ctrl}
	mock.recorder = &MockRoomBlacklistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomBlacklistRepository) EXPECT() *MockRoomBlacklistRepositoryMockRecorder {
	return m.recorder
}

// FindByRoomID mocks base method
func (m *MockRoomBlacklistRepository) FindByRoomID(arg0 string) ([]*models.RoomBlacklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomID", arg0)
	ret0, _ := ret[0].([]*models.RoomBlacklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomID indicates an expected call of FindByRoomID
func (mr *MockRoomBlacklistRepositoryMockRecorder) FindByRoomID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomID", reflect.TypeOf((*MockRoomBlacklistRepository)(nil).FindByRoomID), arg0)
}

// Insert mocks base method
func (m *MockRoomBlacklistRepository) Insert(arg0 *models.RoomBlacklist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRoomBlacklistRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRoomBlacklistRepository)(nil).Insert), arg0)
}

// Delete mocks base method
func (m *MockRoomBlacklistRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRoomBlacklistRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomBlacklistRepository)(nil).Delete), arg0)
}
