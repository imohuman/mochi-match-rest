// Code generated by MockGen. DO NOT EDIT.
// Source: user_detail_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	dbmodel "github.com/taniwhy/mochi-match-rest/domain/models/dbmodel"
	reflect "reflect"
)

// MockUserDetailRepository is a mock of UserDetailRepository interface
type MockUserDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailRepositoryMockRecorder
}

// MockUserDetailRepositoryMockRecorder is the mock recorder for MockUserDetailRepository
type MockUserDetailRepositoryMockRecorder struct {
	mock *MockUserDetailRepository
}

// NewMockUserDetailRepository creates a new mock instance
func NewMockUserDetailRepository(ctrl *gomock.Controller) *MockUserDetailRepository {
	mock := &MockUserDetailRepository{ctrl: ctrl}
	mock.recorder = &MockUserDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDetailRepository) EXPECT() *MockUserDetailRepositoryMockRecorder {
	return m.recorder
}

// FindAllUserDetail mocks base method
func (m *MockUserDetailRepository) FindAllUserDetail() ([]*dbmodel.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUserDetail")
	ret0, _ := ret[0].([]*dbmodel.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUserDetail indicates an expected call of FindAllUserDetail
func (mr *MockUserDetailRepositoryMockRecorder) FindAllUserDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUserDetail", reflect.TypeOf((*MockUserDetailRepository)(nil).FindAllUserDetail))
}

// FindUserDetailByID mocks base method
func (m *MockUserDetailRepository) FindUserDetailByID(id string) (*dbmodel.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDetailByID", id)
	ret0, _ := ret[0].(*dbmodel.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserDetailByID indicates an expected call of FindUserDetailByID
func (mr *MockUserDetailRepositoryMockRecorder) FindUserDetailByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDetailByID", reflect.TypeOf((*MockUserDetailRepository)(nil).FindUserDetailByID), id)
}

// InsertUserDetail mocks base method
func (m *MockUserDetailRepository) InsertUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserDetail indicates an expected call of InsertUserDetail
func (mr *MockUserDetailRepositoryMockRecorder) InsertUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserDetail", reflect.TypeOf((*MockUserDetailRepository)(nil).InsertUserDetail), userDetail)
}

// UpdateUserDetail mocks base method
func (m *MockUserDetailRepository) UpdateUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetail indicates an expected call of UpdateUserDetail
func (mr *MockUserDetailRepositoryMockRecorder) UpdateUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetail", reflect.TypeOf((*MockUserDetailRepository)(nil).UpdateUserDetail), userDetail)
}

// DeleteUserDetail mocks base method
func (m *MockUserDetailRepository) DeleteUserDetail(userDetail *dbmodel.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserDetail", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserDetail indicates an expected call of DeleteUserDetail
func (mr *MockUserDetailRepositoryMockRecorder) DeleteUserDetail(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDetail", reflect.TypeOf((*MockUserDetailRepository)(nil).DeleteUserDetail), userDetail)
}
