// Code generated by MockGen. DO NOT EDIT.
// Source: user_detail_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockUserDetailRepository is a mock of UserDetailRepository interface
type MockUserDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailRepositoryMockRecorder
}

// MockUserDetailRepositoryMockRecorder is the mock recorder for MockUserDetailRepository
type MockUserDetailRepositoryMockRecorder struct {
	mock *MockUserDetailRepository
}

// NewMockUserDetailRepository creates a new mock instance
func NewMockUserDetailRepository(ctrl *gomock.Controller) *MockUserDetailRepository {
	mock := &MockUserDetailRepository{ctrl: ctrl}
	mock.recorder = &MockUserDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDetailRepository) EXPECT() *MockUserDetailRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockUserDetailRepository) FindByID(id string) (*models.UserDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.UserDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserDetailRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserDetailRepository)(nil).FindByID), id)
}

// Insert mocks base method
func (m *MockUserDetailRepository) Insert(userDetail *models.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockUserDetailRepositoryMockRecorder) Insert(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserDetailRepository)(nil).Insert), userDetail)
}

// Update mocks base method
func (m *MockUserDetailRepository) Update(id, name, icon string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, icon)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserDetailRepositoryMockRecorder) Update(id, name, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDetailRepository)(nil).Update), id, name, icon)
}

// Delete mocks base method
func (m *MockUserDetailRepository) Delete(userDetail *models.UserDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserDetailRepositoryMockRecorder) Delete(userDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDetailRepository)(nil).Delete), userDetail)
}
