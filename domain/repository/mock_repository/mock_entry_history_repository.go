// Code generated by MockGen. DO NOT EDIT.
// Source: entry_history_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockEntryHistoryRepository is a mock of EntryHistoryRepository interface
type MockEntryHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntryHistoryRepositoryMockRecorder
}

// MockEntryHistoryRepositoryMockRecorder is the mock recorder for MockEntryHistoryRepository
type MockEntryHistoryRepositoryMockRecorder struct {
	mock *MockEntryHistoryRepository
}

// NewMockEntryHistoryRepository creates a new mock instance
func NewMockEntryHistoryRepository(ctrl *gomock.Controller) *MockEntryHistoryRepository {
	mock := &MockEntryHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockEntryHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntryHistoryRepository) EXPECT() *MockEntryHistoryRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockEntryHistoryRepository) FindAll() ([]*models.EntryHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*models.EntryHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockEntryHistoryRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEntryHistoryRepository)(nil).FindAll))
}

// Insert mocks base method
func (m *MockEntryHistoryRepository) Insert(arg0 *models.EntryHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockEntryHistoryRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEntryHistoryRepository)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockEntryHistoryRepository) Update(arg0 *models.EntryHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEntryHistoryRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntryHistoryRepository)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockEntryHistoryRepository) Delete(arg0 *models.EntryHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEntryHistoryRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntryHistoryRepository)(nil).Delete), arg0)
}

// CountEntryUser mocks base method
func (m *MockEntryHistoryRepository) CountEntryUser(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEntryUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEntryUser indicates an expected call of CountEntryUser
func (mr *MockEntryHistoryRepositoryMockRecorder) CountEntryUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntryUser", reflect.TypeOf((*MockEntryHistoryRepository)(nil).CountEntryUser), arg0)
}

// CheckEntry mocks base method
func (m *MockEntryHistoryRepository) CheckEntry(rid, uid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntry", rid, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEntry indicates an expected call of CheckEntry
func (mr *MockEntryHistoryRepositoryMockRecorder) CheckEntry(rid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntry", reflect.TypeOf((*MockEntryHistoryRepository)(nil).CheckEntry), rid, uid)
}

// LeaveFlg mocks base method
func (m *MockEntryHistoryRepository) LeaveFlg(rid, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveFlg", rid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveFlg indicates an expected call of LeaveFlg
func (mr *MockEntryHistoryRepositoryMockRecorder) LeaveFlg(rid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveFlg", reflect.TypeOf((*MockEntryHistoryRepository)(nil).LeaveFlg), rid, uid)
}
