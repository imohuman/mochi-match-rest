// Code generated by MockGen. DO NOT EDIT.
// Source: chat_post_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	reflect "reflect"
)

// MockChatPostRepository is a mock of ChatPostRepository interface
type MockChatPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatPostRepositoryMockRecorder
}

// MockChatPostRepositoryMockRecorder is the mock recorder for MockChatPostRepository
type MockChatPostRepositoryMockRecorder struct {
	mock *MockChatPostRepository
}

// NewMockChatPostRepository creates a new mock instance
func NewMockChatPostRepository(ctrl *gomock.Controller) *MockChatPostRepository {
	mock := &MockChatPostRepository{ctrl: ctrl}
	mock.recorder = &MockChatPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatPostRepository) EXPECT() *MockChatPostRepositoryMockRecorder {
	return m.recorder
}

// FindByRoomID mocks base method
func (m *MockChatPostRepository) FindByRoomID(id string) ([]*models.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomID", id)
	ret0, _ := ret[0].([]*models.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomID indicates an expected call of FindByRoomID
func (mr *MockChatPostRepositoryMockRecorder) FindByRoomID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomID", reflect.TypeOf((*MockChatPostRepository)(nil).FindByRoomID), id)
}

// FindByRoomIDAndLimit mocks base method
func (m *MockChatPostRepository) FindByRoomIDAndLimit(id string, limit int) ([]*models.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomIDAndLimit", id, limit)
	ret0, _ := ret[0].([]*models.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomIDAndLimit indicates an expected call of FindByRoomIDAndLimit
func (mr *MockChatPostRepositoryMockRecorder) FindByRoomIDAndLimit(id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomIDAndLimit", reflect.TypeOf((*MockChatPostRepository)(nil).FindByRoomIDAndLimit), id, limit)
}

// FindByRoomIDAndOffset mocks base method
func (m *MockChatPostRepository) FindByRoomIDAndOffset(id, offset string) ([]*models.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomIDAndOffset", id, offset)
	ret0, _ := ret[0].([]*models.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomIDAndOffset indicates an expected call of FindByRoomIDAndOffset
func (mr *MockChatPostRepositoryMockRecorder) FindByRoomIDAndOffset(id, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomIDAndOffset", reflect.TypeOf((*MockChatPostRepository)(nil).FindByRoomIDAndOffset), id, offset)
}

// FindByRoomIDAndLimitAndOffset mocks base method
func (m *MockChatPostRepository) FindByRoomIDAndLimitAndOffset(id, offset string, limit int) ([]*models.ChatPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomIDAndLimitAndOffset", id, offset, limit)
	ret0, _ := ret[0].([]*models.ChatPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomIDAndLimitAndOffset indicates an expected call of FindByRoomIDAndLimitAndOffset
func (mr *MockChatPostRepositoryMockRecorder) FindByRoomIDAndLimitAndOffset(id, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomIDAndLimitAndOffset", reflect.TypeOf((*MockChatPostRepository)(nil).FindByRoomIDAndLimitAndOffset), id, offset, limit)
}

// Insert mocks base method
func (m *MockChatPostRepository) Insert(room *models.ChatPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockChatPostRepositoryMockRecorder) Insert(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockChatPostRepository)(nil).Insert), room)
}

// Delete mocks base method
func (m *MockChatPostRepository) Delete(room *models.ChatPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockChatPostRepositoryMockRecorder) Delete(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatPostRepository)(nil).Delete), room)
}
