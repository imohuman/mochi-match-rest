// Code generated by MockGen. DO NOT EDIT.
// Source: room_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/taniwhy/mochi-match-rest/domain/models"
	output "github.com/taniwhy/mochi-match-rest/domain/models/output"
	reflect "reflect"
)

// MockRoomRepository is a mock of RoomRepository interface
type MockRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepositoryMockRecorder
}

// MockRoomRepositoryMockRecorder is the mock recorder for MockRoomRepository
type MockRoomRepositoryMockRecorder struct {
	mock *MockRoomRepository
}

// NewMockRoomRepository creates a new mock instance
func NewMockRoomRepository(ctrl *gomock.Controller) *MockRoomRepository {
	mock := &MockRoomRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomRepository) EXPECT() *MockRoomRepositoryMockRecorder {
	return m.recorder
}

// FindList mocks base method
func (m *MockRoomRepository) FindList() ([]*output.RoomResBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList")
	ret0, _ := ret[0].([]*output.RoomResBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList
func (mr *MockRoomRepositoryMockRecorder) FindList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockRoomRepository)(nil).FindList))
}

// FindByLimitAndOffset mocks base method
func (m *MockRoomRepository) FindByLimitAndOffset(limit, offset int) ([]*output.RoomResBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLimitAndOffset", limit, offset)
	ret0, _ := ret[0].([]*output.RoomResBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLimitAndOffset indicates an expected call of FindByLimitAndOffset
func (mr *MockRoomRepositoryMockRecorder) FindByLimitAndOffset(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLimitAndOffset", reflect.TypeOf((*MockRoomRepository)(nil).FindByLimitAndOffset), limit, offset)
}

// FindByID mocks base method
func (m *MockRoomRepository) FindByID(arg0 string) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockRoomRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRoomRepository)(nil).FindByID), arg0)
}

// FindByUserID mocks base method
func (m *MockRoomRepository) FindByUserID(arg0 string) ([]*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0)
	ret0, _ := ret[0].([]*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID
func (mr *MockRoomRepositoryMockRecorder) FindByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockRoomRepository)(nil).FindByUserID), arg0)
}

// FindUnlockByID mocks base method
func (m *MockRoomRepository) FindUnlockByID(arg0 string) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnlockByID", arg0)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnlockByID indicates an expected call of FindUnlockByID
func (mr *MockRoomRepositoryMockRecorder) FindUnlockByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnlockByID", reflect.TypeOf((*MockRoomRepository)(nil).FindUnlockByID), arg0)
}

// Insert mocks base method
func (m *MockRoomRepository) Insert(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRoomRepositoryMockRecorder) Insert(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRoomRepository)(nil).Insert), room)
}

// Update mocks base method
func (m *MockRoomRepository) Update(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRoomRepositoryMockRecorder) Update(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoomRepository)(nil).Update), room)
}

// Delete mocks base method
func (m *MockRoomRepository) Delete(room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRoomRepositoryMockRecorder) Delete(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomRepository)(nil).Delete), room)
}

// LockFlg mocks base method
func (m *MockRoomRepository) LockFlg(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockFlg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockFlg indicates an expected call of LockFlg
func (mr *MockRoomRepositoryMockRecorder) LockFlg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockFlg", reflect.TypeOf((*MockRoomRepository)(nil).LockFlg), arg0, arg1)
}
