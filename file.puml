@startuml

package "usecase" {
	interface "ChatPostUseCase" as usecase.ChatPostUseCase {
		+DeleteChatPost(room: models.ChatPost): error
		+FindAllChatPost(): (models.ChatPost, error)
		+FindChatPostByRoomID(id: int64): (models.ChatPost, error)
		+InsertChatPost(room: models.ChatPost): error
	}
}


	usecase.ChatPostUseCase ..> models.ChatPost : <<use>> 
	usecase.ChatPostUseCase ..> error : <<return>> 
	usecase.ChatPostUseCase ..> error : <<return>> 
	usecase.ChatPostUseCase ..> error : <<return>> 
	usecase.ChatPostUseCase ..> models.ChatPost : <<use>> 
	usecase.ChatPostUseCase ..> error : <<return>> 

package "usecase" {
	interface "RoomBlacklistUseCase" as usecase.RoomBlacklistUseCase {
		+DeleteBlacklist(roomReservation: models.RoomBlacklist): error
		+FindAllBlacklist(): (models.RoomBlacklist, error)
		+FindBlacklistByID(id: int64): (models.RoomBlacklist, error)
		+InsertBlacklist(roomReservation: models.RoomBlacklist): error
	}
}


	usecase.RoomBlacklistUseCase ..> models.RoomBlacklist : <<use>> 
	usecase.RoomBlacklistUseCase ..> error : <<return>> 
	usecase.RoomBlacklistUseCase ..> error : <<return>> 
	usecase.RoomBlacklistUseCase ..> models.RoomBlacklist : <<return>> 
	usecase.RoomBlacklistUseCase ..> error : <<return>> 
	usecase.RoomBlacklistUseCase ..> models.RoomBlacklist : <<use>> 
	usecase.RoomBlacklistUseCase ..> error : <<return>> 

package "usecase" {
	interface "RoomReservationUseCase" as usecase.RoomReservationUseCase {
		+DeleteRoomReservation(roomReservation: models.RoomReservation): error
		+FindAllRoomReservation(): (models.RoomReservation, error)
		+FindRoomReservationByID(id: int64): (models.RoomReservation, error)
		+InsertRoomReservation(roomReservation: models.RoomReservation): error
		+UpdateRoomReservation(roomReservation: models.RoomReservation): error
	}
}


	usecase.RoomReservationUseCase ..> models.RoomReservation : <<use>> 
	usecase.RoomReservationUseCase ..> error : <<return>> 
	usecase.RoomReservationUseCase ..> error : <<return>> 
	usecase.RoomReservationUseCase ..> models.RoomReservation : <<return>> 
	usecase.RoomReservationUseCase ..> error : <<return>> 
	usecase.RoomReservationUseCase ..> models.RoomReservation : <<use>> 
	usecase.RoomReservationUseCase ..> error : <<return>> 
	usecase.RoomReservationUseCase ..> models.RoomReservation : <<use>> 
	usecase.RoomReservationUseCase ..> error : <<return>> 

package "usecase" {
	interface "RoomUseCase" as usecase.RoomUseCase {
		+DeleteRoom(room: models.Room): error
		+FindAllRoom(): (models.Room, error)
		+FindRoomByID(id: int64): (models.Room, error)
		+InsertRoom(room: models.Room): error
		+UpdateRoom(room: models.Room): error
	}
}


	usecase.RoomUseCase ..> models.Room : <<use>> 
	usecase.RoomUseCase ..> error : <<return>> 
	usecase.RoomUseCase ..> error : <<return>> 
	usecase.RoomUseCase ..> models.Room : <<return>> 
	usecase.RoomUseCase ..> error : <<return>> 
	usecase.RoomUseCase ..> models.Room : <<use>> 
	usecase.RoomUseCase ..> error : <<return>> 
	usecase.RoomUseCase ..> models.Room : <<use>> 
	usecase.RoomUseCase ..> error : <<return>> 

package "usecase" {
	interface "UserDetailUseCase" as usecase.UserDetailUseCase {
		+CreateUserDetail(userDetail: models.UserDetail): error
		+DeleteUserDetail(userDetail: models.UserDetail): error
		+FindUserDetailByID(id: int64): (models.UserDetail, error)
		+UpdateUserDetail(userDetail: models.UserDetail): error
	}
}


	usecase.UserDetailUseCase ..> models.UserDetail : <<use>> 
	usecase.UserDetailUseCase ..> error : <<return>> 
	usecase.UserDetailUseCase ..> models.UserDetail : <<use>> 
	usecase.UserDetailUseCase ..> error : <<return>> 
	usecase.UserDetailUseCase ..> models.UserDetail : <<return>> 
	usecase.UserDetailUseCase ..> error : <<return>> 
	usecase.UserDetailUseCase ..> models.UserDetail : <<use>> 
	usecase.UserDetailUseCase ..> error : <<return>> 

package "usecase" {
	interface "UserUseCase" as usecase.UserUseCase {
		+CreateUser(user: models.User): error
		+FindUserByProviderID(provider: string, id: string): (models.User, error)
	}
}


	usecase.UserUseCase ..> models.User : <<use>> 
	usecase.UserUseCase ..> error : <<return>> 
	usecase.UserUseCase ..> models.User : <<return>> 
	usecase.UserUseCase ..> error : <<return>> 

package "usecase" {
	class "chatPostUsecase" as usecase.chatPostUsecase <<V,Orchid>> {
		-chatPostRepository: repository.ChatPostRepository
		+FindAllChatPost(): (models.ChatPost, error)
		+FindChatPostByRoomID(id: int64): (models.ChatPost, error)
		+InsertChatPost(chatpost: models.ChatPost): error
		+DeleteChatPost(chatpost: models.ChatPost): error
	}
}

	usecase.chatPostUsecase --> repository.ChatPostRepository

	usecase.chatPostUsecase ..> error : <<return>> 
	usecase.chatPostUsecase ..> error : <<return>> 
	usecase.chatPostUsecase ..> models.ChatPost : <<use>> 
	usecase.chatPostUsecase ..> error : <<return>> 
	usecase.chatPostUsecase ..> models.ChatPost : <<use>> 
	usecase.chatPostUsecase ..> error : <<return>> 

package "usecase" {
	class "roomBlacklistUsecase" as usecase.roomBlacklistUsecase <<V,Orchid>> {
		-roomBlacklistRepository: repository.RoomBlacklistRepository
		+FindAllBlacklist(): (models.RoomBlacklist, error)
		+FindBlacklistByID(id: int64): (models.RoomBlacklist, error)
		+InsertBlacklist(blacklist: models.RoomBlacklist): error
		+DeleteBlacklist(blacklist: models.RoomBlacklist): error
	}
}

	usecase.roomBlacklistUsecase --> repository.RoomBlacklistRepository

	usecase.roomBlacklistUsecase ..> error : <<return>> 
	usecase.roomBlacklistUsecase ..> models.RoomBlacklist : <<return>> 
	usecase.roomBlacklistUsecase ..> error : <<return>> 
	usecase.roomBlacklistUsecase ..> models.RoomBlacklist : <<use>> 
	usecase.roomBlacklistUsecase ..> error : <<return>> 
	usecase.roomBlacklistUsecase ..> models.RoomBlacklist : <<use>> 
	usecase.roomBlacklistUsecase ..> error : <<return>> 

package "usecase" {
	class "roomReservationUsecase" as usecase.roomReservationUsecase <<V,Orchid>> {
		-roomReservationRepository: repository.RoomReservationRepository
		+FindAllRoomReservation(): (models.RoomReservation, error)
		+FindRoomReservationByID(id: int64): (models.RoomReservation, error)
		+InsertRoomReservation(roomReservation: models.RoomReservation): error
		+UpdateRoomReservation(room: models.RoomReservation): error
		+DeleteRoomReservation(room: models.RoomReservation): error
	}
}

	usecase.roomReservationUsecase --> repository.RoomReservationRepository

	usecase.roomReservationUsecase ..> error : <<return>> 
	usecase.roomReservationUsecase ..> models.RoomReservation : <<return>> 
	usecase.roomReservationUsecase ..> error : <<return>> 
	usecase.roomReservationUsecase ..> models.RoomReservation : <<use>> 
	usecase.roomReservationUsecase ..> error : <<return>> 
	usecase.roomReservationUsecase ..> models.RoomReservation : <<use>> 
	usecase.roomReservationUsecase ..> error : <<return>> 
	usecase.roomReservationUsecase ..> models.RoomReservation : <<use>> 
	usecase.roomReservationUsecase ..> error : <<return>> 

package "usecase" {
	class "roomUsecase" as usecase.roomUsecase <<V,Orchid>> {
		-roomRepository: repository.RoomRepository
		+FindAllRoom(): (models.Room, error)
		+FindRoomByID(id: int64): (models.Room, error)
		+InsertRoom(room: models.Room): error
		+UpdateRoom(room: models.Room): error
		+DeleteRoom(room: models.Room): error
	}
}

	usecase.roomUsecase --> repository.RoomRepository

	usecase.roomUsecase ..> error : <<return>> 
	usecase.roomUsecase ..> models.Room : <<return>> 
	usecase.roomUsecase ..> error : <<return>> 
	usecase.roomUsecase ..> models.Room : <<use>> 
	usecase.roomUsecase ..> error : <<return>> 
	usecase.roomUsecase ..> models.Room : <<use>> 
	usecase.roomUsecase ..> error : <<return>> 
	usecase.roomUsecase ..> models.Room : <<use>> 
	usecase.roomUsecase ..> error : <<return>> 

package "usecase" {
	class "userDetailUsecase" as usecase.userDetailUsecase <<V,Orchid>> {
		-userDetailRepository: repository.UserDetailRepository
		+FindUserDetailByID(id: int64): (models.UserDetail, error)
		+CreateUserDetail(userDetail: models.UserDetail): error
		+UpdateUserDetail(userDetail: models.UserDetail): error
		+DeleteUserDetail(userDetail: models.UserDetail): error
	}
}

	usecase.userDetailUsecase --> repository.UserDetailRepository

	usecase.userDetailUsecase ..> models.UserDetail : <<return>> 
	usecase.userDetailUsecase ..> error : <<return>> 
	usecase.userDetailUsecase ..> models.UserDetail : <<use>> 
	usecase.userDetailUsecase ..> error : <<return>> 
	usecase.userDetailUsecase ..> models.UserDetail : <<use>> 
	usecase.userDetailUsecase ..> error : <<return>> 
	usecase.userDetailUsecase ..> models.UserDetail : <<use>> 
	usecase.userDetailUsecase ..> error : <<return>> 

package "usecase" {
	class "userUsecase" as usecase.userUsecase <<V,Orchid>> {
		-userRepository: repository.UserRepository
		+FindUserByProviderID(provider: string, id: string): (models.User, error)
		+CreateUser(user: models.User): error
	}
}

	usecase.userUsecase --> repository.UserRepository

	usecase.userUsecase ..> models.User : <<return>> 
	usecase.userUsecase ..> error : <<return>> 
	usecase.userUsecase ..> models.User : <<use>> 
	usecase.userUsecase ..> error : <<return>> 

package "models" {
	class "ChatPost" as models.ChatPost <<V,Orchid>> {
		+ID: int64
		+Room: int64
		+User: int64
		+Message: string
		+CreatedAt: time.Time
	}
}



package "models" {
	class "EntryHistory" as models.EntryHistory <<V,Orchid>> {
		+ID: int
		+Room: int
		+User: int
		+IsLeave: bool
		+EntryTime: time.Time
		+LeaveTime: time.Time
		+CreatedAt: time.Time
	}
}



package "models" {
	class "FavorateGame" as models.FavorateGame <<V,Orchid>> {
		+ID: int
		+UserDetail: int
		+GameTitle: int
		+CreatedAt: time.Time
	}
}



package "models" {
	class "GameTitle" as models.GameTitle <<V,Orchid>> {
		+ID: int
		+GameTitle: int
		+CreatedAt: time.Time
		+UpdateAt: time.Time
	}
}



package "models" {
	class "GoogleUser" as models.GoogleUser <<V,Orchid>> {
		+ID: string
		+Email: string
		+VerifiedEmail: bool
		+Name: string
		+GivenName: string
		+FamilyName: string
		+Picture: string
		+Locale: string
	}
}



package "models" {
	class "Report" as models.Report <<V,Orchid>> {
		+ID: int
		+Caller: int
		+Vaiolator: int
		+VaiolationDetail: int
		+ReportedRoom: int
		+CreatedAt: time.Time
	}
}



package "models" {
	class "Room" as models.Room <<V,Orchid>> {
		+ID: int64
		+RoomOwner: int64
		+GameTitle: int64
		+Capacity: int
		+IsLock: bool
		+CreatedAt: time.Time
	}
}



package "models" {
	class "RoomBlacklist" as models.RoomBlacklist <<V,Orchid>> {
		+ID: int64
		+Room: int64
		+BlackUser: int64
		+CreatedAt: time.Time
	}
}



package "models" {
	class "RoomReservation" as models.RoomReservation <<V,Orchid>> {
		+ID: int64
		+Room: int64
		+RelasingTime: time.Time
		+CreatedAt: time.Time
	}
}



package "models" {
	class "User" as models.User <<V,Orchid>> {
		+ID: int64
		+GoogleID: string
		+FacebookID: string
		+TwitterID: string
		+IsAdmin: bool
		+IsFrozen: bool
		+IsDelete: bool
		+CreatedAt: time.Time
		+UpdateAt: time.Time
	}
}



package "models" {
	class "UserDetail" as models.UserDetail <<V,Orchid>> {
		+ID: int64
		+User: int64
		+UserName: string
		+Icon: int
		+UpdateAt: time.Time
	}
}



package "handler" {
	interface "ChatPostHandler" as handler.ChatPostHandler {
		+CreateChatPost(: gin.Context)
		+GetChatPostByRoomID(: gin.Context)
	}
}



package "handler" {
	interface "RoomHandler" as handler.RoomHandler {
		+CreateBlacklist(: gin.Context)
		+CreateRoom(: gin.Context)
		+GetBlacklist(: gin.Context)
		+GetRoom(: gin.Context)
		+GetRoomByID(: gin.Context)
	}
}



package "handler" {
	interface "UserHandler" as handler.UserHandler {
		+CreateUser(: gin.Context)
		+DeleteUser(: gin.Context)
		+GetUser(: gin.Context)
		+UpdateUser(: gin.Context)
	}
}



package "handler" {
	class "chatPostHandler" as handler.chatPostHandler <<V,Orchid>> {
		-chatPostUsecase: usecase.ChatPostUseCase
		+GetChatPostByRoomID(c: gin.Context)
		+CreateChatPost(c: gin.Context)
	}
}

	handler.chatPostHandler --> usecase.ChatPostUseCase


package "handler" {
	class "roomHandler" as handler.roomHandler <<V,Orchid>> {
		-userUsecase: usecase.UserUseCase
		-roomUsecase: usecase.RoomUseCase
		-roomBlacklistUseCase: usecase.RoomBlacklistUseCase
		-roomReservationUseCase: usecase.RoomReservationUseCase
		+GetRoom(c: gin.Context)
		+GetRoomByID(c: gin.Context)
		+CreateRoom(c: gin.Context)
		+GetBlacklist(c: gin.Context)
		+CreateBlacklist(c: gin.Context)
	}
}

	handler.roomHandler --> usecase.UserUseCase
	handler.roomHandler --> usecase.RoomUseCase
	handler.roomHandler --> usecase.RoomBlacklistUseCase
	handler.roomHandler --> usecase.RoomReservationUseCase


package "handler" {
	class "userHandler" as handler.userHandler <<V,Orchid>> {
		-userUsecase: usecase.UserUseCase
		-userDetailUsecase: usecase.UserDetailUseCase
		+GetUser(c: gin.Context)
		+CreateUser(c: gin.Context)
		+UpdateUser(c: gin.Context)
		+DeleteUser(c: gin.Context)
	}
}

	handler.userHandler --> usecase.UserUseCase
	handler.userHandler --> usecase.UserDetailUseCase


package "config" {
	class "config" as config.config <<V,Orchid>> {
		+Database: struct{Host: string; Port: string; User: string; Pass: string; DBName: string}
		+Redis: struct{Size: int; Network: string; Addr: string; Pass: string; Key: string}
		+GoogleOAuth: struct{RedirectURL: string; ClientID: string; ClientSecret: string}
	}
}



package "repository" {
	interface "ChatPostRepository" as repository.ChatPostRepository {
		+DeleteChatPost(room: models.ChatPost): error
		+FindAllChatPost(): (models.ChatPost, error)
		+FindChatPostByRoomID(id: int64): (models.ChatPost, error)
		+InsertChatPost(room: models.ChatPost): error
	}
}


	repository.ChatPostRepository ..> models.ChatPost : <<use>> 
	repository.ChatPostRepository ..> error : <<return>> 
	repository.ChatPostRepository ..> error : <<return>> 
	repository.ChatPostRepository ..> error : <<return>> 
	repository.ChatPostRepository ..> models.ChatPost : <<use>> 
	repository.ChatPostRepository ..> error : <<return>> 

package "repository" {
	interface "RoomBlacklistRepository" as repository.RoomBlacklistRepository {
		+DeleteBlacklist(room: models.RoomBlacklist): error
		+FindAllBlacklist(): (models.RoomBlacklist, error)
		+FindBlacklistByID(id: int64): (models.RoomBlacklist, error)
		+InsertBlacklist(room: models.RoomBlacklist): error
	}
}


	repository.RoomBlacklistRepository ..> models.RoomBlacklist : <<use>> 
	repository.RoomBlacklistRepository ..> error : <<return>> 
	repository.RoomBlacklistRepository ..> error : <<return>> 
	repository.RoomBlacklistRepository ..> models.RoomBlacklist : <<return>> 
	repository.RoomBlacklistRepository ..> error : <<return>> 
	repository.RoomBlacklistRepository ..> models.RoomBlacklist : <<use>> 
	repository.RoomBlacklistRepository ..> error : <<return>> 

package "repository" {
	interface "RoomRepository" as repository.RoomRepository {
		+DeleteRoom(room: models.Room): error
		+FindAllRoom(): (models.Room, error)
		+FindRoomByID(id: int64): (models.Room, error)
		+InsertRoom(room: models.Room): error
		+UpdateRoom(room: models.Room): error
	}
}


	repository.RoomRepository ..> models.Room : <<use>> 
	repository.RoomRepository ..> error : <<return>> 
	repository.RoomRepository ..> error : <<return>> 
	repository.RoomRepository ..> models.Room : <<return>> 
	repository.RoomRepository ..> error : <<return>> 
	repository.RoomRepository ..> models.Room : <<use>> 
	repository.RoomRepository ..> error : <<return>> 
	repository.RoomRepository ..> models.Room : <<use>> 
	repository.RoomRepository ..> error : <<return>> 

package "repository" {
	interface "RoomReservationRepository" as repository.RoomReservationRepository {
		+DeleteRoomReservation(room: models.RoomReservation): error
		+FindAllRoomReservation(): (models.RoomReservation, error)
		+FindRoomReservationByID(id: int64): (models.RoomReservation, error)
		+InsertRoomReservation(room: models.RoomReservation): error
		+UpdateRoomReservation(room: models.RoomReservation): error
	}
}


	repository.RoomReservationRepository ..> models.RoomReservation : <<use>> 
	repository.RoomReservationRepository ..> error : <<return>> 
	repository.RoomReservationRepository ..> error : <<return>> 
	repository.RoomReservationRepository ..> models.RoomReservation : <<return>> 
	repository.RoomReservationRepository ..> error : <<return>> 
	repository.RoomReservationRepository ..> models.RoomReservation : <<use>> 
	repository.RoomReservationRepository ..> error : <<return>> 
	repository.RoomReservationRepository ..> models.RoomReservation : <<use>> 
	repository.RoomReservationRepository ..> error : <<return>> 

package "repository" {
	interface "UserDetailRepository" as repository.UserDetailRepository {
		+DeleteUserDetail(userDetail: models.UserDetail): error
		+FindAllUserDetail(): (models.UserDetail, error)
		+FindUserDetailByID(id: int64): (models.UserDetail, error)
		+InsertUserDetail(userDetail: models.UserDetail): error
		+UpdateUserDetail(userDetail: models.UserDetail): error
	}
}


	repository.UserDetailRepository ..> models.UserDetail : <<use>> 
	repository.UserDetailRepository ..> error : <<return>> 
	repository.UserDetailRepository ..> error : <<return>> 
	repository.UserDetailRepository ..> models.UserDetail : <<return>> 
	repository.UserDetailRepository ..> error : <<return>> 
	repository.UserDetailRepository ..> models.UserDetail : <<use>> 
	repository.UserDetailRepository ..> error : <<return>> 
	repository.UserDetailRepository ..> models.UserDetail : <<use>> 
	repository.UserDetailRepository ..> error : <<return>> 

package "repository" {
	interface "UserRepository" as repository.UserRepository {
		+DeleteUser(user: models.User): error
		+FindAllUser(): (models.User, error)
		+FindUserByID(id: int64): (models.User, error)
		+FindUserByProviderID(provider: string, id: string): (models.User, error)
		+InsertUser(user: models.User): error
		+UpdateUser(user: models.User): error
	}
}


	repository.UserRepository ..> models.User : <<use>> 
	repository.UserRepository ..> error : <<return>> 
	repository.UserRepository ..> error : <<return>> 
	repository.UserRepository ..> models.User : <<return>> 
	repository.UserRepository ..> error : <<return>> 
	repository.UserRepository ..> models.User : <<return>> 
	repository.UserRepository ..> error : <<return>> 
	repository.UserRepository ..> models.User : <<use>> 
	repository.UserRepository ..> error : <<return>> 
	repository.UserRepository ..> models.User : <<use>> 
	repository.UserRepository ..> error : <<return>> 

package "datastore" {
	class "chatPostDatastore" as datastore.chatPostDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllChatPost(): (models.ChatPost, error)
		+FindChatPostByRoomID(id: int64): (models.ChatPost, error)
		+InsertChatPost(chatpost: models.ChatPost): error
		+DeleteChatPost(chatpost: models.ChatPost): error
	}
}


	datastore.chatPostDatastore ..> error : <<return>> 
	datastore.chatPostDatastore ..> error : <<return>> 
	datastore.chatPostDatastore ..> models.ChatPost : <<use>> 
	datastore.chatPostDatastore ..> error : <<return>> 
	datastore.chatPostDatastore ..> models.ChatPost : <<use>> 
	datastore.chatPostDatastore ..> error : <<return>> 

package "datastore" {
	class "roomBlacklistDatastore" as datastore.roomBlacklistDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllBlacklist(): (models.RoomBlacklist, error)
		+FindBlacklistByID(id: int64): (models.RoomBlacklist, error)
		+InsertBlacklist(blacklist: models.RoomBlacklist): error
		+DeleteBlacklist(blacklist: models.RoomBlacklist): error
	}
}


	datastore.roomBlacklistDatastore ..> error : <<return>> 
	datastore.roomBlacklistDatastore ..> models.RoomBlacklist : <<return>> 
	datastore.roomBlacklistDatastore ..> error : <<return>> 
	datastore.roomBlacklistDatastore ..> models.RoomBlacklist : <<use>> 
	datastore.roomBlacklistDatastore ..> error : <<return>> 
	datastore.roomBlacklistDatastore ..> models.RoomBlacklist : <<use>> 
	datastore.roomBlacklistDatastore ..> error : <<return>> 

package "datastore" {
	class "roomDatastore" as datastore.roomDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllRoom(): (models.Room, error)
		+FindRoomByID(id: int64): (models.Room, error)
		+InsertRoom(room: models.Room): error
		+UpdateRoom(room: models.Room): error
		+DeleteRoom(room: models.Room): error
	}
}


	datastore.roomDatastore ..> error : <<return>> 
	datastore.roomDatastore ..> models.Room : <<return>> 
	datastore.roomDatastore ..> error : <<return>> 
	datastore.roomDatastore ..> models.Room : <<use>> 
	datastore.roomDatastore ..> error : <<return>> 
	datastore.roomDatastore ..> models.Room : <<use>> 
	datastore.roomDatastore ..> error : <<return>> 
	datastore.roomDatastore ..> models.Room : <<use>> 
	datastore.roomDatastore ..> error : <<return>> 

package "datastore" {
	class "roomReservationDatastore" as datastore.roomReservationDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllRoomReservation(): (models.RoomReservation, error)
		+FindRoomReservationByID(id: int64): (models.RoomReservation, error)
		+InsertRoomReservation(roomReservation: models.RoomReservation): error
		+UpdateRoomReservation(roomReservation: models.RoomReservation): error
		+DeleteRoomReservation(roomReservation: models.RoomReservation): error
	}
}


	datastore.roomReservationDatastore ..> error : <<return>> 
	datastore.roomReservationDatastore ..> models.RoomReservation : <<return>> 
	datastore.roomReservationDatastore ..> error : <<return>> 
	datastore.roomReservationDatastore ..> models.RoomReservation : <<use>> 
	datastore.roomReservationDatastore ..> error : <<return>> 
	datastore.roomReservationDatastore ..> models.RoomReservation : <<use>> 
	datastore.roomReservationDatastore ..> error : <<return>> 
	datastore.roomReservationDatastore ..> models.RoomReservation : <<use>> 
	datastore.roomReservationDatastore ..> error : <<return>> 

package "datastore" {
	class "userDatastore" as datastore.userDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllUser(): (models.User, error)
		+FindUserByID(id: int64): (models.User, error)
		+FindUserByProviderID(provider: string, id: string): (models.User, error)
		+InsertUser(user: models.User): error
		+UpdateUser(user: models.User): error
		+DeleteUser(user: models.User): error
	}
}


	datastore.userDatastore ..> error : <<return>> 
	datastore.userDatastore ..> models.User : <<return>> 
	datastore.userDatastore ..> error : <<return>> 
	datastore.userDatastore ..> models.User : <<return>> 
	datastore.userDatastore ..> error : <<return>> 
	datastore.userDatastore ..> models.User : <<use>> 
	datastore.userDatastore ..> error : <<return>> 
	datastore.userDatastore ..> models.User : <<use>> 
	datastore.userDatastore ..> error : <<return>> 
	datastore.userDatastore ..> models.User : <<use>> 
	datastore.userDatastore ..> error : <<return>> 

package "datastore" {
	class "userDetailDatastore" as datastore.userDetailDatastore <<V,Orchid>> {
		-db: gorm.DB
		+FindAllUserDetail(): (models.UserDetail, error)
		+FindUserDetailByID(id: int64): (models.UserDetail, error)
		+InsertUserDetail(userDetail: models.UserDetail): error
		+UpdateUserDetail(userDetail: models.UserDetail): error
		+DeleteUserDetail(userDetail: models.UserDetail): error
	}
}


	datastore.userDetailDatastore ..> error : <<return>> 
	datastore.userDetailDatastore ..> models.UserDetail : <<return>> 
	datastore.userDetailDatastore ..> error : <<return>> 
	datastore.userDetailDatastore ..> models.UserDetail : <<use>> 
	datastore.userDetailDatastore ..> error : <<return>> 
	datastore.userDetailDatastore ..> models.UserDetail : <<use>> 
	datastore.userDetailDatastore ..> error : <<return>> 
	datastore.userDetailDatastore ..> models.UserDetail : <<use>> 
	datastore.userDetailDatastore ..> error : <<return>> 

package "auth" {
	interface "InterfaceGoogleOAuthHandler" as auth.InterfaceGoogleOAuthHandler {
		+Callback(c: gin.Context)
		+Login(c: gin.Context)
	}
}



package "auth" {
	class "googleOAuthHandler" as auth.googleOAuthHandler <<E,#FFCC00>> {
		-oauthConf: oauth2.Config
		-uU: usecase.UserUseCase
		+Login(c: gin.Context)
		+Callback(c: gin.Context)
	}
}

	auth.googleOAuthHandler --> usecase.UserUseCase


	usecase.ChatPostUseCase -up-|> repository.ChatPostRepository
	usecase.RoomBlacklistUseCase -up-|> repository.RoomBlacklistRepository
	usecase.RoomReservationUseCase -up-|> repository.RoomReservationRepository
	usecase.RoomUseCase -up-|> repository.RoomRepository
	usecase.chatPostUsecase -up-|> usecase.ChatPostUseCase
	usecase.chatPostUsecase -up-|> repository.ChatPostRepository
	usecase.roomBlacklistUsecase -up-|> usecase.RoomBlacklistUseCase
	usecase.roomBlacklistUsecase -up-|> repository.RoomBlacklistRepository
	usecase.roomReservationUsecase -up-|> usecase.RoomReservationUseCase
	usecase.roomReservationUsecase -up-|> repository.RoomReservationRepository
	usecase.roomUsecase -up-|> usecase.RoomUseCase
	usecase.roomUsecase -up-|> repository.RoomRepository
	usecase.userDetailUsecase -up-|> usecase.UserDetailUseCase
	usecase.userUsecase -up-|> usecase.UserUseCase
	handler.chatPostHandler -up-|> handler.ChatPostHandler
	handler.roomHandler -up-|> handler.RoomHandler
	handler.userHandler -up-|> handler.UserHandler
	repository.ChatPostRepository -up-|> usecase.ChatPostUseCase
	repository.RoomBlacklistRepository -up-|> usecase.RoomBlacklistUseCase
	repository.RoomRepository -up-|> usecase.RoomUseCase
	repository.RoomReservationRepository -up-|> usecase.RoomReservationUseCase
	datastore.chatPostDatastore -up-|> usecase.ChatPostUseCase
	datastore.chatPostDatastore -up-|> repository.ChatPostRepository
	datastore.roomBlacklistDatastore -up-|> usecase.RoomBlacklistUseCase
	datastore.roomBlacklistDatastore -up-|> repository.RoomBlacklistRepository
	datastore.roomDatastore -up-|> usecase.RoomUseCase
	datastore.roomDatastore -up-|> repository.RoomRepository
	datastore.roomReservationDatastore -up-|> usecase.RoomReservationUseCase
	datastore.roomReservationDatastore -up-|> repository.RoomReservationRepository
	datastore.userDatastore -up-|> repository.UserRepository
	datastore.userDetailDatastore -up-|> repository.UserDetailRepository
	auth.googleOAuthHandler -up-|> auth.InterfaceGoogleOAuthHandler


@enduml
